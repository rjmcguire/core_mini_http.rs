#[cfg(test)]
mod ssdp_tests {
	

	use super::*;
	use super::super::{HttpRequestParser};


	use core::prelude::*;
	use std::prelude::*;
	use collections::vec::Vec;

	#[test]
	pub fn test_ssdp_parsing() {
		let discovery = "M-SEARCH * HTTP/1.1\r\n\
						 HOST: 239.255.255.250:1900\r\n\
						 MAN: \"ssdp:discover\"\r\n\
						 MX: 5\r\n\
						 ST: ssdp:all\r\n\
						 \r\n";


		let mut parser = HttpRequestParser::new();
		let bytes = &discovery.bytes();
		let bytes: Vec<u8> = bytes.clone().collect();
		parser.parse_bytes(&bytes).unwrap();
		/*
		for b in msg.bytes() {
			parser.parse_bytes(&[b]);
		}
		*/

		let req = parser.get_request();
		println!("parsed: {:?}", req);		
	}
}







/*

M-SEARCH * HTTP/1.1
HOST: 239.255.255.250:1900
MAN: "ssdp:discover"
MX: 5
ST: ssdp:all

*/

/*
char peer0_0[] = {
0x4d, 0x2d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 
0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 
0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x4f, 0x53, 
0x54, 0x3a, 0x20, 0x32, 0x33, 0x39, 0x2e, 0x32, 
0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x32, 
0x35, 0x30, 0x3a, 0x31, 0x39, 0x30, 0x30, 0x0d, 
0x0a, 0x4d, 0x41, 0x4e, 0x3a, 0x20, 0x22, 0x73, 
0x73, 0x64, 0x70, 0x3a, 0x64, 0x69, 0x73, 0x63, 
0x6f, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x4d, 
0x58, 0x3a, 0x20, 0x35, 0x0d, 0x0a, 0x53, 0x54, 
0x3a, 0x20, 0x73, 0x73, 0x64, 0x70, 0x3a, 0x61, 
0x6c, 0x6c, 0x0d, 0x0a, 0x0d, 0x0a };
*/
